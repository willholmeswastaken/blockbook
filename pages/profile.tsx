import { useCallback, useEffect, useState } from 'react'
import type { NextPage } from 'next'
import { useWeb3 } from '@3rdweb/hooks'
import { ConnectWallet } from '@3rdweb/react'
import Head from 'next/head'
import Image from 'next/image'
import { getChallenge, getJwt } from '../persistence/auth'
import styles from '../styles/Home.module.css'
import { getUser, updateUser } from '../persistence/user'

const Profile: NextPage = () => {
  const { address, chainId, connectWallet, provider } = useWeb3();
  const [token, setToken] = useState('');
  const [ username, setUsername] = useState('');
  const getApiChallenge= useCallback(async () => {
    if(address === undefined) return;
    const challenge = await getChallenge(address);
    return challenge;
  }, [address]);

  const getApiJwt = useCallback(async () => {
      const challenge = await getApiChallenge();
      if(challenge === undefined) return;
      const signer = provider?.getSigner();
      const signedChallenge = await signer?.signMessage(challenge);
      const tokenResponse = await getJwt(address!, signedChallenge!);
      setToken(tokenResponse);
  }, [getApiChallenge, provider, address]);

  const updateUsername = useCallback(async () => {
      await updateUser(token, username);
  }, [username, token]);

  useEffect(() => {
      if(token !== '')
        return;
      (async () => {
          await getApiJwt();
      })();
  }, [token, getApiJwt]);

  useEffect(() => {
      if(username !== '' || token === '')
        return;
      (async () => {
          const user = await getUser(token);
          setUsername(user?.username!);
      })
  }, [token, username])
  return (
    <div className={styles.container}>
      <Head>
        <title>Blockbook</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to Blockbook!
        </h1>
        {
            !token &&
            <p>Loading...</p>
        }
        {
            address &&
            (
                <div>
                    {`Welcome, ${address} !`}
                    <br />
                    <input type="text" value={username} onChange={(ev) => setUsername(ev.target.value)}></input>
                    <br />
                    <button type="button" onClick={async () => await updateUsername()}>Save updates</button>
                </div>
            )
        }
        {
          !address &&
          <ConnectWallet />
        }
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Profile
